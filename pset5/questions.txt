0.  TODO
1.  getrusage()  returns  resource usage measures for who, which can be one
       of the following:
2.  16
3.  because rusage writes to those variables and it's easier to use them then to reassign them other vars. 
4.  first we open the file for reading. If we couldn't allocate the needed memory and got a null pointer then we abort and unload the dictionary we loaded into memory.
We allocate the memory for the word to array to be 1 char longer (needed for the null terminator) than the maximum known word and therefore.
We start reading the file char by char until we reach the EOF constant which signifies the end of file.
If the chracter is an alphatbetical character or an apostrophe append the charcter to word and increment the index of the character to be written. 
If the index becomes greater than the known largest word, then we know it's not a word so just consume the rest of the string and set the word's index to 0. 
If the word is a number, then just consume the rest of it. 
Else it looks like we found a real word by checking that the index is > 0 and having appended everything in the first if case we can terminate the character with \0.
We update the words counter.
5.  By using fscanf we can't really predict what type of var we're gonna have as the next, so if we treat everything as strings we might run into a problem where
we're gonna try to spellcheck a number and it's gonna give us a wrong check. 
6.  TODO
7.  TODO
8.  TODO
9.  TODO
10. TODO
