0.  TODO
1.  TODO
2.  TODO
3.  TODO
4.  TODO
5.  TODO
6.  TODO
7.  the hashtable is more efficient in terms of loading, since it doesn't require that much
memory to be allocated as a trie. Also the hashtable check seems to be faster
than the trie due to the fact that I
allocated one bucket for each possible word in the dictionary, so the search algorithm doesn't have
to traverse a lot of nodes in linked list in order to get to the right one. 
8.  TODO
9.  TODO
10. yep, a trie can be made to load a word just as the word is being read - not having to wait to 
accumulate an entire word. Hashtable unloading can be done via hashing (not sure though if this
will bring any significant performance upgrades)



trie

WORDS MISSPELLED:     13008
WORDS IN DICTIONARY:  143091
WORDS IN TEXT:        567967
TIME IN load:         0.07
TIME IN check:        0.19
TIME IN size:         0.00
TIME IN unload:       0.04
TIME IN TOTAL:        0.30


hashtable 
WORDS MISSPELLED:     13008
WORDS IN DICTIONARY:  143091
WORDS IN TEXT:        567967
TIME IN load:         0.02
TIME IN check:        0.18
TIME IN size:         0.00
TIME IN unload:       0.01
TIME IN TOTAL:        0.21


